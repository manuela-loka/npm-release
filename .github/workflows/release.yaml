name: Release
on:
  push:
    branches:
      - main

env:
  NODE_VERSION: "20"

permissions:
  contents: read

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm clean-install

      - name: Check for new releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=$(npx semantic-release --dry-run | grep -oP "(?<=The next release version is )\S*")
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo $NEW_VERSION
        continue-on-error: true

      - run: echo "the version is ${{ env.new_version }}"

      - name: Increment build if no new version is created
        if: ${{ env.new_version == '' }}
        run: |
          current_build=$(jq '.custom_entries.build_number' package.json)
          echo "Current build number: $current_build"

          new_build=$((current_build + 1))
          echo "New build number: $new_build"

      - name: Process new version
        if: ${{ env.new_version != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Version retrieval succeeded. New version ${{ env.new_version }} will be released."
          npx semantic-release

      # - name: Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: npx semantic-release -tag-format v${version}+
